heat_template_version: 2013-05-23

description: >
   HOT template clones a running DBserver and its data volume and then boots
   from the cloned OS disk, attach the data disk and get MySQL going again. The
   template also clones the HammerDB load machine.  Both machines are moved to 
   a new development network and the data disk has new QoS settings applied. 
   Lastly, an external IP address is attached to both the DBserver and HammerDB 
   server. Defaults were set on most options for better demo showing, everyone
   else will want to remove/change those. 

parameters:
  flavor:
    type: string
    description: Flavor to use for DBservers
    default: m1.large
    constraints:
       - allowed_values:
          - m1.large
          - m1.xlarge
         description: For this example, the OS disk on the source is 80Gb 
                      therefore must be large or xlarge
  hammer_flavor:
    type: string
    description: Flavor to use for hammer servers
    default: m1.medium
    constraints:
       - allowed_values:
          - m1.medium
          - m1.large
          - m1.xlarge
         description: In this example, we are cloning a 40GB windows instance 
                      to generate load.
  priv_net:
    type: string
    description: name/ID of private network into which DBservers get deployed
    default: Development
  pub_net:
    type: string
    description: name/ID of public network into which DBservers get deployed
    default: ext-net
  sec_group:
    type: string
    description: security group for the DBserver
    default: mysql 
  ssh_key:
    type: string
    description: ssh key to inject into the DBserver.
  vol_type:
    type: string
    description: Select the volume type to use for this creation
    default: development
    constraints:
      - allowed_values:
           - mongo1-iops
           - mongo2-iops
           - solidfire
           - mysql-iops
           - LAMP-iops
           - development
        description: Value must be one of mongo1-iops, mongo2-iops, solidfire, 
                     mysql-iops, LAMP-iops, development
  db_os_src_vol:
    type: string
    description: The Operating System disk volume ID
    default: f25612d9-b338-45b5-8c57-da39318380ce
  data_src_vol:
    type: string
    description: The Data disk volume ID
    default: d94dee5e-b711-44cc-b13a-dd784d0d573e
  hammer_os_src_vol:
    type: string
    description: The Operating System disk volume ID
    default: d4ff3f03-e2db-4ceb-99f6-bc46690abdad

resources:
  db_os_volume:
    type: OS::Cinder::Volume
    properties:
      source_volid: { get_param: db_os_src_vol }

  data_volume:
    type: OS::Cinder::Volume
    properties:
      source_volid: { get_param: data_src_vol }
      volume_type: { get_param: vol_type }

  hammer_os_volume:
    type: OS::Cinder::Volume
    properties:
      source_volid: { get_param: hammer_os_src_vol }
      volume_type: { get_param: vol_type }

  DBserver:
    type: OS::Nova::Server
    depends_on: [ db_os_volume, data_volume ]
    properties:
      block_device_mapping: 
        - device_name: vda
          volume_id: { get_resource: db_os_volume }
          delete_on_termination: true
      flavor: { get_param: flavor }
      user_data_format: RAW
      networks:
        - network: { get_param: priv_net }
      security_groups: [ ssh, { get_param: sec_group } ]
      key_name: { get_param: ssh_key }
      user_data: |
        #!/bin/sh
        # Trigger rescan to ensure we see the attached volume
        for i in /sys/class/scsi_host/*; do echo "- - -" > $i/scan; done
        # Wait for the rescan as the volume doesn't appear immediately
        for i in $(seq 10)
        do
          grep -q vdb /proc/partitions && break
          sleep 1
        done
        if grep -q vdb /proc/partitions
        /bin/systemctl restart mysql.service

  hammerServer:
    type: OS::Nova::Server
    depends_on: [ hammer_os_volume ]
    properties:
      block_device_mapping:
        - device_name: vda
          volume_id: { get_resource: hammer_os_volume }
          delete_on_termination: false
      flavor: { get_param: hammer_flavor }
      user_data_format: RAW
      networks:
        - network: { get_param: priv_net }
      security_groups: [ RDP ]

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: data_volume }
      instance_uuid: { get_resource: DBserver }

  DBserver_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: pub_net }
      port_id: { get_attr: 
                 [DBserver, addresses, { get_param: priv_net }, 0, port ] }

  hammer_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: pub_net }
      port_id: { get_attr: 
                 [hammerServer, addresses, { get_param: priv_net }, 0, port ] }

outputs:
  DBserver_private_ip:
    description: IP address of DBserver in private network
    value: { get_attr: [ DBserver, first_address ] }
  DBserver_public_ip:
    description: Floating IP address of DBserver in public network
    value: { get_attr: [ DBserver_floating_ip, floating_ip_address ] }

  hammerServer_private_ip:
    description: IP address of DBserver in private network
    value: { get_attr: [ hammerServer, first_address ] }
  hammerServer_public_ip:
    description: Floating IP address of DBserver in public network
    value: { get_attr: [ hammer_floating_ip, floating_ip_address ] }
